{"version":3,"sources":["GlobalStyles.js","assets/images/giphy-color-shooting.mp4","components/Header/Header.tsx","store/actions/giphyActions.ts","components/SearchInput/SearchInput.tsx","store/hooks.ts","components/SearchBox/Pagination.tsx","components/Modal/Modal.tsx","components/SearchBox/Renditions.tsx","components/SearchBox/GridLoading.tsx","components/SearchBox/readGiphyData.ts","components/SearchBox/SearchResult.tsx","App.tsx","reportWebVitals.ts","store/reducers/giphyReducer.ts","store/totalReducers.ts","store/index.ts","index.tsx"],"names":["CustomStyles","createGlobalStyle","GlobalStyles","Header","useState","isVisible","setIsVisible","videoRef","useRef","useEffect","setTimeout","current","play","ref","preload","width","src","giphyMp4","type","SET_KEYWORD","SearchInput","keyword","setKeyword","dispatch","useDispatch","dispatchKeyword","payload","setSearchKeyword","placeholder","value","onChange","e","target","onKeyPress","charCode","onBlur","useAppSelector","useSelector","Pagination","totalCount","pageSize","offset","setOffset","pagesCount","Math","ceil","currentPage","classes","btn","moveRight","moveLeft","disabledCursor","onClick","xmlns","fill","viewBox","stroke","d","max","round","Modal","children","isOpen","onClose","styles","mediaBox","renditionBox","Renditions","gif","title","original","alt","height","autoPlay","loop","downsized","thumbnail","emptyCells","GridLoading","map","readGiphyData","searchKeyword","a","fetch","rawData","json","data","gifs","images","fixed_width_small_still","url","downsized_small","mp4","min","pagination","total_count","errorMessage","toString","SearchResult","s","giphyReducer","setGifs","isLoading","setIsLoading","setTotalCount","apiErrorMessage","setApiErrorMessage","setIsOpen","currentGif","setCurrentGif","readData","g","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","totalReducers","combineReducers","state","action","actions","store","createStore","applyMiddleware","createLogger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa14813c.chunk.js","sourcesContent":["import React from 'react'\nimport { createGlobalStyle } from 'styled-components'\nimport tw, { theme, GlobalStyles as BaseStyles } from 'twin.macro'\n\nconst CustomStyles = createGlobalStyle`\n  body {\n    -webkit-tap-highlight-color: ${theme`colors.purple.500`};\n    background-color: black;\n    color: white;\n    ${tw`antialiased`}\n  }\n`\n\nconst GlobalStyles = () => (\n  <>\n    <BaseStyles />\n    <CustomStyles />\n  </>\n)\n\nexport default GlobalStyles;\n","export default __webpack_public_path__ + \"static/media/giphy-color-shooting.d0b7992e.mp4\";","import { useEffect, useState, useRef } from 'react';\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport giphyMp4 from \"../../assets/images/giphy-color-shooting.mp4\";\n\nconst Header = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      videoRef.current && videoRef.current.play();\n      setIsVisible(true);\n    }, 2000);\n  }, []);\n\n  return (\n    <div tw=\"flex justify-center text-center items-center bg-black\">\n      <video ref={videoRef} preload=\"true\" width=\"200\">\n        <source src={giphyMp4} type=\"video/mp4\"></source>\n        GIPHY Logo\n      </video>\n\n      <div css={[\n        tw`text-white text-4xl bg-black transition-opacity duration-1000 opacity-5`,\n        isVisible && tw`opacity-100`,\n        \"transition-duration: 6000ms;\"\n      ]}>GIPHY Explorer</div>\n    </div>\n  )\n}\n\nexport default Header\n","export const SET_KEYWORD = 'SET_KEYWORD';\n\nexport const setSearchKeyword = (keyword: string) => {\n  return {\n    type: SET_KEYWORD,\n    payload: keyword\n  }\n}\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport { setSearchKeyword } from '../../store/actions/giphyActions';\n\nconst SearchInput = () => {\n  const [keyword, setKeyword] = useState('');\n  const dispatch = useDispatch();\n\n  const dispatchKeyword = () => {\n    dispatch(setSearchKeyword(keyword));\n  }\n\n  const handleKeyPress = (e: any) => {\n    if(e.charCode === 13) {\n      dispatchKeyword();\n    }\n  }\n\n  return (\n    <div tw=\"w-full md:w-8/12 mx-auto py-4 text-center bg-black\">\n      <input\n        type=\"text\"\n        tw=\"transition-all border-none rounded-md shadow-purple focus:shadow-purple-light bg-gray-300 focus:bg-white text-sm text-purple-600 px-4 py-2 mx-auto w-8/12 focus:w-10/12 md:w-3/12 md:focus:w-5/12\"\n        placeholder=\"Enter your keyword here to search ...\"\n        value={keyword}\n        onChange={e => setKeyword(e.target.value)}\n        onKeyPress={handleKeyPress}\n        onBlur={dispatchKeyword}\n      />\n    </div>\n  )\n}\n\nexport default SearchInput\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\n\ninterface PaginationProps {\n  totalCount: number;\n  pageSize: number;\n  offset: number;\n  setOffset: any;\n}\n\nconst Pagination = ({totalCount, pageSize, offset, setOffset}: PaginationProps) => {\n\n  const handleFirstClick = () => {\n    setOffset(0);\n  }\n\n  const handlePrevClick = () => {\n    if(offset === 0)\n      return;\n\n    setOffset(Math.max(0, offset - pageSize));\n  }\n\n  const pagesCount = Math.ceil(totalCount / pageSize);\n  const currentPage = offset / pageSize;\n\n  const handleNextClick = () => {\n    if(currentPage + 1 === pagesCount)\n      return;\n    setOffset(offset + pageSize);\n  }\n\n  const handleLastClick = () => {\n    setOffset( Math.round( (pagesCount - 1) * pageSize) );\n  }\n\n  const classes = {\n    btn: tw`h-10 w-10 bg-purple-700 hover:bg-purple-600 rounded-sm p-1 cursor-pointer transition-all`,\n    moveRight: tw`hover:translate-x-2`,\n    moveLeft: tw`hover:-translate-x-2`,\n    disabledCursor: tw`cursor-not-allowed`\n  }\n\n  return (\n    <div tw=\"flex justify-center items-center gap-5 md:gap-10 mb-10\">\n\n      <div css={[classes.btn, offset > 0 && classes.moveLeft, offset === 0 && classes.disabledCursor]} onClick={handleFirstClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 19l-7-7 7-7m8 14l-7-7 7-7\" />\n        </svg>\n      </div>\n\n      <div css={[classes.btn, offset > 0 && classes.moveLeft, offset === 0 && classes.disabledCursor]} onClick={handlePrevClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\n        </svg>\n      </div>\n\n      {currentPage+1} / {pagesCount}\n\n      <div css={[classes.btn, (currentPage + 1 < pagesCount) && classes.moveRight, (currentPage+1 === pagesCount) && classes.disabledCursor]} onClick={handleNextClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n        </svg>\n      </div>\n\n      <div css={[classes.btn, (currentPage + 1 < pagesCount) && classes.moveRight, (currentPage+1 === pagesCount) && classes.disabledCursor]} onClick={handleLastClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 5l7 7-7 7M5 5l7 7-7 7\" />\n        </svg>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Pagination;\n","import React from 'react';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\n\ninterface ModalProps {\n  children: any;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst Modal = ({children, isOpen, onClose}: ModalProps) => {\n\n  if(isOpen)\n    return (\n      <div tw=\"absolute w-full h-full top-0 left-0\">\n\n        <div tw=\"flex justify-center items-center w-full h-full backdrop-filter backdrop-blur-lg bg-purple-dark bg-opacity-70\" onClick={onClose}>\n\n          <div tw=\"bg-white text-black w-min min-w-1/3 h-auto min-h-300 p-10 rounded-md opacity-100\">\n            {children}\n          </div>\n\n        </div>\n\n      </div>\n    );\n  else\n      return <></>;\n}\n\nexport default Modal;\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport RenditionsProps from './RenditionsProps';\n\nconst styles = {\n  mediaBox: tw`bg-gray-200 border-2 border-gray-400 mt-5`,\n  renditionBox: tw`flex-1 justify-center items-center text-center mb-4 text-sm`\n}\n\nconst Renditions = ({gif}: RenditionsProps) => {\n  return (\n    <div tw=\"flex flex-col items-center\">\n\n      <div tw=\"text-center\">\n        <span tw=\"text-purple-dark font-bold text-2xl\">{gif.title}</span>\n\n        <img\n          src={gif.original} alt=\"\"\n          width={gif.width} height={gif.height}\n          css={styles.mediaBox}\n        />\n      </div>\n\n      <div tw=\"flex h-1/6 mt-4 gap-4\">\n\n        <div css={styles.renditionBox}>\n          <video preload=\"true\" css={[styles.mediaBox, tw`h-full`]} autoPlay={true} loop={true}>\n            <source src={gif.downsized} type=\"video/mp4\"></source>\n          </video>\n          Down Sized Video\n        </div>\n\n        <div css={styles.renditionBox}>\n          <img src={gif.thumbnail} alt=\"\" css={[styles.mediaBox, tw`h-full`]} />\n          Static Image\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Renditions\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\n\n// I hard coded it, due to performance issues\nconst emptyCells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\nconst GridLoading = () => {\n  return (\n    <div tw=\"flex flex-wrap justify-center items-center gap-5 animate-pulse\">\n      { emptyCells.map( (e) => (\n        <div tw=\"w-32 h-32 bg-gray-800 flex justify-around items-center\"></div>\n      ))}\n    </div>\n  )\n}\n\nexport default GridLoading\n","import GifProps from \"./GifProps\";\n// import readGiphyDataProps from \"./readGiphyDataProps\";\n\nconst MAX_API_RESULT = 5000; // maximum result number of Giphy API\n\nconst readGiphyData = async (searchKeyword: string, pageSize: number, offset: number) => {\n  if(! process.env.REACT_APP_GIPHY_API_KEY) {\n    console.log(\"Please provide a valid API key for Giphy\");\n    return {\n      gifs: [],\n      totalCount: 0,\n      errorMessage: \"Please provide a valid API key for Giphy\"\n    };\n  }\n\n  try {\n    const rawData = await fetch(\"http://api.giphy.com/v1/gifs/search?api_key=\" + process.env.REACT_APP_GIPHY_API_KEY + \"&q=\" + searchKeyword + \"&limit=\" + pageSize + \"&offset=\" + offset)\n    const data: any = await rawData.json();\n      \n    const gifs: GifProps[] = data && data.data && data.data.map( (d: any) => ({\n      title: d.title,\n      thumbnail: d.images.fixed_width_small_still.url,\n      original: d.images.original.url,\n      downsized: d.images.downsized_small.mp4,\n      width: d.images.original.width,\n      height: d.images.original.height\n    }));\n\n    const totalCount = Math.min(MAX_API_RESULT, data.pagination.total_count);\n\n    return {\n      gifs,\n      totalCount,\n      errorMessage: ''\n    };\n  } catch (error: any) {\n    return {\n      gifs: [],\n      totalCount: -1,\n      errorMessage: error.toString()\n    };\n  }\n}\n\nexport default readGiphyData;\n","import { useEffect, useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport {useAppSelector} from '../../store/hooks';\nimport Pagination from './Pagination';\nimport Modal from '../Modal/Modal';\nimport GifProps from './GifProps';\nimport Renditions from './Renditions';\nimport GridLoading from './GridLoading';\nimport readGiphyData from './readGiphyData';\n\nconst SearchResult = () => {\n  const searchKeyword = useAppSelector( s => s.giphyReducer.searchKeyword );\n  const [gifs, setGifs] = useState<GifProps[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [offset, setOffset] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n  const [apiErrorMessage, setApiErrorMessage] = useState('');\n  const PAGE_SIZE = 12;\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [currentGif, setCurrentGif] = useState<GifProps>();\n\n  useEffect(() => {\n    setOffset(0);\n  }, [searchKeyword]);\n\n  const readData = async () => {\n    setIsLoading(true);\n\n    const { gifs, totalCount, errorMessage } = await readGiphyData(searchKeyword, PAGE_SIZE, offset);\n    if(gifs) setGifs(gifs);\n    if(totalCount) setTotalCount(totalCount);\n    if(errorMessage) setApiErrorMessage(errorMessage);\n\n    setIsLoading(false);\n  }\n\n  useEffect( () => {\n    readData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchKeyword, offset]);\n\n  return (\n    <>\n      <div tw=\"w-full md:w-8/12 mx-auto my-14 text-center\">\n\n        { isLoading && <GridLoading /> }\n\n        { apiErrorMessage && <span tw=\"text-red-700 text-2xl mx-auto\">{apiErrorMessage}</span> }\n\n        <div tw=\"flex flex-wrap justify-center gap-6\">\n          {!isLoading && !apiErrorMessage && gifs.map( g => (\n            <div tw=\"flex items-center flex-col w-32 cursor-pointer\" onClick={ (e) => {\n              setCurrentGif(g);\n              setIsOpen(true);\n            }}>\n              <img src={g.thumbnail} alt={g.title} tw=\"transition-all w-24 hover:w-28\" />\n              <span tw=\"text-gray-300 overflow-auto\">{g.title}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {\n        searchKeyword && (\n          <Pagination totalCount={totalCount} pageSize={PAGE_SIZE} offset={offset} setOffset={setOffset} />\n        )\n      }\n\n      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\n        {currentGif && (\n          <Renditions gif={currentGif} />\n        )}\n      </Modal>\n    </>\n  )\n}\n\nexport default SearchResult;\n","import React from 'react';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport Header from './components/Header/Header';\nimport SearchInput from './components/SearchInput/SearchInput';\nimport SearchResult from './components/SearchBox/SearchResult';\n\nfunction App() {\n  return (\n    <div tw=\"container\">\n      <div tw=\"sticky top-0\">\n        <Header />\n        <SearchInput />\n      </div>\n      <SearchResult />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actions from \"../actions/giphyActions\";\n\nconst defaultState = {\n  searchKeyword: ''\n}\n\nexport const giphyReducer = (state = defaultState, action: any) => {\n  switch (action.type) {\n    case actions.SET_KEYWORD:\n      return {\n        ...state,\n        searchKeyword: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { giphyReducer } from './reducers/giphyReducer';\n\nexport const totalReducers = combineReducers({\n  giphyReducer,\n});","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { totalReducers } from './totalReducers';\n\nexport const store = createStore(\n  totalReducers,\n  applyMiddleware(\n    createLogger(),\n  )\n);\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlobalStyles from './GlobalStyles';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <GlobalStyles />\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}