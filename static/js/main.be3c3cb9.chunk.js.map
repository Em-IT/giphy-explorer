{"version":3,"sources":["GlobalStyles.js","assets/images/giphy-color-shooting.mp4","components/Header/Header.tsx","store/actions/giphyActions.ts","components/SearchInput/SearchInput.tsx","store/hooks.ts","components/SearchBox/Pagination.tsx","components/Modal/Modal.tsx","components/SearchBox/SearchResult.tsx","App.tsx","reportWebVitals.ts","store/reducers/giphyReducer.ts","store/totalReducers.ts","store/index.ts","index.tsx"],"names":["CustomStyles","createGlobalStyle","GlobalStyles","Header","useState","isVisible","setIsVisible","videoRef","useRef","useEffect","setTimeout","current","play","ref","preload","width","src","giphyMp4","type","SET_KEYWORD","SearchInput","keyword","setKeyword","dispatch","useDispatch","dispatchKeyword","payload","setSearchKeyword","placeholder","value","onChange","e","target","onKeyPress","charCode","onBlur","useAppSelector","useSelector","Pagination","totalCount","pageSize","offset","setOffset","pagesCount","Math","ceil","currentPage","classes","btn","moveRight","moveLeft","disabledCursor","onClick","xmlns","fill","viewBox","stroke","d","max","round","Modal","children","isOpen","onClose","SearchResult","searchKeyword","s","giphyReducer","gifs","setGifs","isLoading","setIsLoading","setTotalCount","setIsOpen","currentGif","setCurrentGif","console","log","process","fetch","then","response","json","data","gifsResult","map","title","thumbnail","images","fixed_width_small_still","url","original","downsized","downsized_small","mp4","height","min","pagination","total_count","styles","mediaBox","renditionBox","g","alt","autoPlay","loop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","totalReducers","combineReducers","state","action","actions","store","createStore","applyMiddleware","createLogger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be3c3cb9.chunk.js","sourcesContent":["import React from 'react'\nimport { createGlobalStyle } from 'styled-components'\nimport tw, { theme, GlobalStyles as BaseStyles } from 'twin.macro'\n\nconst CustomStyles = createGlobalStyle`\n  body {\n    -webkit-tap-highlight-color: ${theme`colors.purple.500`};\n    background-color: black;\n    color: white;\n    ${tw`antialiased`}\n  }\n`\n\nconst GlobalStyles = () => (\n  <>\n    <BaseStyles />\n    <CustomStyles />\n  </>\n)\n\nexport default GlobalStyles;\n","export default __webpack_public_path__ + \"static/media/giphy-color-shooting.d0b7992e.mp4\";","import { useEffect, useState, useRef } from 'react';\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport giphyMp4 from \"../../assets/images/giphy-color-shooting.mp4\";\n\nconst Header = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      videoRef.current && videoRef.current.play();\n      setIsVisible(true);\n    }, 2000);\n  }, []);\n\n  return (\n    <div tw=\"flex justify-center text-center items-center bg-black\">\n      <video ref={videoRef} preload=\"true\" width=\"200\">\n        <source src={giphyMp4} type=\"video/mp4\"></source>\n        GIPHY Logo\n      </video>\n\n      <div css={[\n        tw`text-white text-4xl bg-black transition-opacity duration-1000 opacity-5`,\n        isVisible && tw`opacity-100`,\n        \"transition-duration: 6000ms;\"\n      ]}>GIPHY Explorer</div>\n    </div>\n  )\n}\n\nexport default Header\n","export const SET_KEYWORD = 'SET_KEYWORD';\n\nexport const setSearchKeyword = (keyword: string) => {\n  return {\n    type: SET_KEYWORD,\n    payload: keyword\n  }\n}\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport { setSearchKeyword } from '../../store/actions/giphyActions';\n\nconst SearchInput = () => {\n  const [keyword, setKeyword] = useState('');\n  const dispatch = useDispatch();\n\n  const dispatchKeyword = () => {\n    dispatch(setSearchKeyword(keyword));\n  }\n\n  const handleKeyPress = (e: any) => {\n    if(e.charCode === 13) {\n      dispatchKeyword();\n    }\n  }\n\n  return (\n    <div tw=\"w-8/12 mx-auto py-4 text-center bg-black\">\n      <input\n        type=\"text\"\n        tw=\"transition-all border-none rounded-md shadow-purple focus:shadow-purple-light bg-gray-300 focus:bg-white text-sm text-purple-600 px-4 py-2 mx-auto w-3/12 focus:w-5/12\"\n        placeholder=\"Enter your keyword here to search ...\"\n        value={keyword}\n        onChange={e => setKeyword(e.target.value)}\n        onKeyPress={handleKeyPress}\n        onBlur={dispatchKeyword}\n      />\n    </div>\n  )\n}\n\nexport default SearchInput\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\n\ninterface PaginationProps {\n  totalCount: number;\n  pageSize: number;\n  offset: number;\n  setOffset: any;\n}\n\nconst Pagination = ({totalCount, pageSize, offset, setOffset}: PaginationProps) => {\n\n  const handleFirstClick = () => {\n    setOffset(0);\n  }\n\n  const handlePrevClick = () => {\n    if(offset === 0)\n      return;\n\n    setOffset(Math.max(0, offset - pageSize));\n  }\n\n  const pagesCount = Math.ceil(totalCount / pageSize);\n  const currentPage = offset / pageSize;\n\n  const handleNextClick = () => {\n    if(currentPage + 1 === pagesCount)\n      return;\n    setOffset(offset + pageSize);\n  }\n\n  const handleLastClick = () => {\n    setOffset( Math.round( (pagesCount - 1) * pageSize) );\n  }\n\n  const classes = {\n    btn: tw`h-10 w-10 bg-purple-700 hover:bg-purple-600 rounded-sm p-1 cursor-pointer transition-all`,\n    moveRight: tw`hover:translate-x-2`,\n    moveLeft: tw`hover:-translate-x-2`,\n    disabledCursor: tw`cursor-not-allowed`\n  }\n\n  return (\n    <div tw=\"flex justify-center items-center gap-10 mb-10\">\n\n      <div css={[classes.btn, offset > 0 && classes.moveLeft, offset === 0 && classes.disabledCursor]} onClick={handleFirstClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 19l-7-7 7-7m8 14l-7-7 7-7\" />\n        </svg>\n      </div>\n\n      <div css={[classes.btn, offset > 0 && classes.moveLeft, offset === 0 && classes.disabledCursor]} onClick={handlePrevClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\n        </svg>\n      </div>\n\n      {currentPage+1} / {pagesCount}\n\n      <div css={[classes.btn, (currentPage + 1 < pagesCount) && classes.moveRight, (currentPage+1 === pagesCount) && classes.disabledCursor]} onClick={handleNextClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n        </svg>\n      </div>\n\n      <div css={[classes.btn, (currentPage + 1 < pagesCount) && classes.moveRight, (currentPage+1 === pagesCount) && classes.disabledCursor]} onClick={handleLastClick}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 5l7 7-7 7M5 5l7 7-7 7\" />\n        </svg>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Pagination;\n","import React from 'react';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\n\ninterface ModalProps {\n  children: any;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst Modal = ({children, isOpen, onClose}: ModalProps) => {\n\n  if(isOpen)\n    return (\n      <div tw=\"absolute w-full h-full top-0 left-0\">\n\n        <div tw=\"flex justify-center items-center w-full h-full backdrop-filter backdrop-blur-lg bg-purple-dark bg-opacity-70\" onClick={onClose}>\n\n          <div tw=\"bg-white text-black w-min min-w-1/3 h-auto min-h-300 p-10 rounded-md opacity-100\">\n            {children}\n          </div>\n\n        </div>\n\n      </div>\n    );\n  else\n      return <></>;\n}\n\nexport default Modal;\n","import { useEffect, useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport {useAppSelector} from '../../store/hooks';\nimport Pagination from './Pagination';\nimport Modal from '../Modal/Modal';\n\ninterface gifProps {\n  title: string;\n  thumbnail: string;\n  original: string;\n  downsized: string;\n  width: string;\n  height: string;\n}\n\nconst SearchResult = () => {\n  const searchKeyword = useAppSelector( s => s.giphyReducer.searchKeyword );\n  const [gifs, setGifs] = useState<gifProps[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [offset, setOffset] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n  const PAGE_SIZE = 12;\n  const MAX_API_RESULT = 5000; // maximum result number of Giphy API\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [currentGif, setCurrentGif] = useState<gifProps>();\n\n  useEffect(() => {\n    setOffset(0);\n  }, [searchKeyword]);\n\n  useEffect(() => {\n    console.log('process.env=', process.env);\n    if(process.env.REACT_APP_GIPHY_API_KEY) {\n      setIsLoading(true);\n      fetch(\"http://api.giphy.com/v1/gifs/search?api_key=\" + process.env.REACT_APP_GIPHY_API_KEY + \"&q=\" + searchKeyword + \"&limit=\" + PAGE_SIZE + \"&offset=\" + offset)\n      .then(response => response.json())\n      .then(data => {\n        const gifsResult: gifProps[] = data && data.data && data.data.map( (d: any) => ({\n          title: d.title,\n          thumbnail: d.images.fixed_width_small_still.url,\n          original: d.images.original.url,\n          downsized: d.images.downsized_small.mp4,\n          width: d.images.original.width,\n          height: d.images.original.height\n        }));\n        setGifs(gifsResult);\n        setTotalCount(Math.min(MAX_API_RESULT, data.pagination.total_count));\n        setIsLoading(false);\n      });\n    }\n    else {\n      console.log(\"Please provide a valid API key for Giphy\");\n    }\n  }, [searchKeyword, offset]);\n\n  const emptyCells = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n  const styles = {\n    mediaBox: tw`bg-gray-200 border-2 border-gray-400 mt-5`,\n    renditionBox: tw`flex-1 justify-center items-center text-center mb-4 text-sm`\n  }\n\n  return (\n    <>\n      <div tw=\"w-8/12 mx-auto my-14 text-center\">\n\n        {isLoading && (\n          <div tw=\"flex flex-wrap justify-center items-center gap-5 animate-pulse\">\n            { emptyCells.map( (e) => (\n              <div tw=\"w-32 h-32 bg-gray-800 flex justify-around items-center\"></div>\n            ))}\n          </div>\n        )}\n\n        <div tw=\"flex flex-wrap justify-center gap-6\">\n          {!isLoading && gifs.map( g => (\n            <div tw=\"flex items-center flex-col w-32 cursor-pointer\" onClick={ (e) => {\n              setCurrentGif(g);\n              setIsOpen(true);\n            }}>\n              <img src={g.thumbnail} alt={g.title} tw=\"transition-all w-24 hover:w-28\" />\n              <span tw=\"text-gray-300 overflow-auto\">{g.title}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {\n        searchKeyword && (\n          <Pagination totalCount={totalCount} pageSize={PAGE_SIZE} offset={offset} setOffset={setOffset} />\n        )\n      }\n\n      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\n        {currentGif && (\n          <div tw=\"flex flex-col items-center\">\n\n            <div tw=\"text-center\">\n              <span tw=\"text-purple-dark font-bold text-2xl\">{currentGif.title}</span>\n\n              <img\n                src={currentGif.original} alt=\"\"\n                width={currentGif.width} height={currentGif.height}\n                css={styles.mediaBox}\n              />\n            </div>\n\n            <div tw=\"flex h-1/6 mt-4 gap-4\">\n\n              <div css={styles.renditionBox}>\n                <video preload=\"true\" css={[styles.mediaBox, tw`h-full`]} autoPlay={true} loop={true}>\n                  <source src={currentGif.downsized} type=\"video/mp4\"></source>\n                </video>\n                Down Sized Video\n              </div>\n\n              <div css={styles.renditionBox}>\n                <img src={currentGif.thumbnail} alt=\"\" css={[styles.mediaBox, tw`h-full`]} />\n                Static Image\n              </div>\n\n            </div>\n\n          </div>\n        )}\n      </Modal>\n    </>\n  )\n}\n\nexport default SearchResult;\n","import React from 'react';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport 'styled-components/macro';\nimport Header from './components/Header/Header';\nimport SearchInput from './components/SearchInput/SearchInput';\nimport SearchResult from './components/SearchBox/SearchResult';\n\nfunction App() {\n  return (\n    <div tw=\"container\">\n      <div tw=\"sticky top-0\">\n        <Header />\n        <SearchInput />\n      </div>\n      <SearchResult />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actions from \"../actions/giphyActions\";\n\nconst defaultState = {\n  searchKeyword: ''\n}\n\nexport const giphyReducer = (state = defaultState, action: any) => {\n  switch (action.type) {\n    case actions.SET_KEYWORD:\n      return {\n        ...state,\n        searchKeyword: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { giphyReducer } from './reducers/giphyReducer';\n\nexport const totalReducers = combineReducers({\n  giphyReducer,\n});","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { totalReducers } from './totalReducers';\n\nexport const store = createStore(\n  totalReducers,\n  applyMiddleware(\n    createLogger(),\n  )\n);\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlobalStyles from './GlobalStyles';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <GlobalStyles />\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}